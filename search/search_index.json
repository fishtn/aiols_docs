{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hoopa \u7b80\u4ecb hoopa \u662f\u4e00\u4e2a\u8f7b\u91cf\u3001\u5feb\u901f\u7684\u5f02\u6b65\u5206\u5e03\u5f0f\u722c\u866b\u6846\u67b6 \u652f\u6301\u57fa\u4e8e\u5185\u5b58\u3001redis\u3001rabbitmq\u7684\u4f18\u5148\u7ea7\u961f\u5217 \u652f\u6301aiohttp\u3001httpx \u652f\u6301\u65ad\u70b9\u7eed\u4f20 \u9879\u76ee\u8fd8\u5728\u5f00\u53d1\u6d4b\u8bd5\u4e2d\uff0c\u8bf7\u52ff\u7528\u4e8e\u751f\u4ea7\u73af\u5883 \u73af\u5883\u8981\u6c42\uff1a Python 3.7.0+ Works on Linux, Windows, macOS \u5b89\u88c5 # For Linux & Mac pip install -U hoopa[uvloop] # For Windows pip install -U hoopa \u5f00\u59cb \u521b\u5efa\u722c\u866b hoopa create -s first_spider \u7136\u540e\u6dfb\u52a0url\uff1ahttp://httpbin.org/get import hoopa class FirstSpider(hoopa.Spider): name = \"first\" start_urls = [\"http://httpbin.org/get\"] async def parse(self, request, response): print(response) if __name__ == \"__main__\": FirstSpider().start() \u611f\u8c22 Tinepeas ruia feapder scrapy","title":"\u7b80\u4ecb"},{"location":"#hoopa","text":"","title":"hoopa"},{"location":"#_1","text":"hoopa \u662f\u4e00\u4e2a\u8f7b\u91cf\u3001\u5feb\u901f\u7684\u5f02\u6b65\u5206\u5e03\u5f0f\u722c\u866b\u6846\u67b6 \u652f\u6301\u57fa\u4e8e\u5185\u5b58\u3001redis\u3001rabbitmq\u7684\u4f18\u5148\u7ea7\u961f\u5217 \u652f\u6301aiohttp\u3001httpx \u652f\u6301\u65ad\u70b9\u7eed\u4f20 \u9879\u76ee\u8fd8\u5728\u5f00\u53d1\u6d4b\u8bd5\u4e2d\uff0c\u8bf7\u52ff\u7528\u4e8e\u751f\u4ea7\u73af\u5883","title":"\u7b80\u4ecb"},{"location":"#_2","text":"Python 3.7.0+ Works on Linux, Windows, macOS","title":"\u73af\u5883\u8981\u6c42\uff1a"},{"location":"#_3","text":"# For Linux & Mac pip install -U hoopa[uvloop] # For Windows pip install -U hoopa","title":"\u5b89\u88c5"},{"location":"#_4","text":"\u521b\u5efa\u722c\u866b hoopa create -s first_spider \u7136\u540e\u6dfb\u52a0url\uff1ahttp://httpbin.org/get import hoopa class FirstSpider(hoopa.Spider): name = \"first\" start_urls = [\"http://httpbin.org/get\"] async def parse(self, request, response): print(response) if __name__ == \"__main__\": FirstSpider().start()","title":"\u5f00\u59cb"},{"location":"#_5","text":"Tinepeas ruia feapder scrapy","title":"\u611f\u8c22"},{"location":"Started/1.overview/","text":"\u6982\u89c8 \u6570\u636e\u6d41\u5982\u4e0b\uff1a \u6838\u5fc3\u662fspider\uff0c\u89e3\u6790\uff0c\u5b58\u50a8\u90fd\u5728spider \u4e00\u4e2a\u7b80\u6613\u7684\u6d41\u7a0b\u56fe\uff1a \u4ecestart_requests\u521d\u59cb\u5316\u5165\u53e3url\uff0c\u628a\u5c01\u88c5\u597d\u7684request \u6dfb\u52a0\u5230\u722c\u866b\u961f\u5217\u4e2d\u3002 \u722c\u866b\u5f00\u59cb\u540e\u4ecescheduler\u83b7\u53d6request\uff0c\u5904\u7406\u722c\u866b\u4efb\u52a1\u3002 \u5f53scheduler\u7684\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u722c\u866b\u7ed3\u675f\u3002","title":"1. \u6982\u89c8"},{"location":"Started/1.overview/#_1","text":"\u6570\u636e\u6d41\u5982\u4e0b\uff1a \u6838\u5fc3\u662fspider\uff0c\u89e3\u6790\uff0c\u5b58\u50a8\u90fd\u5728spider \u4e00\u4e2a\u7b80\u6613\u7684\u6d41\u7a0b\u56fe\uff1a \u4ecestart_requests\u521d\u59cb\u5316\u5165\u53e3url\uff0c\u628a\u5c01\u88c5\u597d\u7684request \u6dfb\u52a0\u5230\u722c\u866b\u961f\u5217\u4e2d\u3002 \u722c\u866b\u5f00\u59cb\u540e\u4ecescheduler\u83b7\u53d6request\uff0c\u5904\u7406\u722c\u866b\u4efb\u52a1\u3002 \u5f53scheduler\u7684\u961f\u5217\u4e3a\u7a7a\u65f6\uff0c\u722c\u866b\u7ed3\u675f\u3002","title":"\u6982\u89c8"},{"location":"Started/2.installation/","text":"\u5b89\u88c5 # For Linux & Mac pip install -U hoopa[uvloop] # For Windows pip install -U hoopa","title":"2. \u5b89\u88c5"},{"location":"Started/2.installation/#_1","text":"# For Linux & Mac pip install -U hoopa[uvloop] # For Windows pip install -U hoopa","title":"\u5b89\u88c5"},{"location":"Started/3.start/","text":"\u521b\u5efa\u722c\u866b \u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u5de5\u5177\u5feb\u901f\u521b\u5efa\u722c\u866b \u521b\u5efa\u722c\u866b hoopa create -s demo -s \u8868\u793a\u521b\u5efa\u7684\u662f\u5355\u6587\u4ef6\u722c\u866b \u53e6\u5916\u53ef\u9009\u53c2\u6570\u6709-f(--full)\uff0c\u53ef\u4ee5\u521b\u5efa\u65b9\u6cd5\u7684\u6bd4\u8f83\u9f50\u5168\u7684\u722c\u866b hoopa create -s demo2 -f \u521b\u5efa\u722c\u866b\u9879\u76ee hoopa create -p demoProject \u4f8b\u5b50\uff1a hoopa create -s demo -f \u7136\u540e\u6dfb\u52a0\u5f00\u59cburl\uff1a \"https://httpbin.org/get\" from hoopa import Spider from hoopa import Item from hoopa import Middleware class DataItem(Item): pass class Demo(Spider): name = \"demo\" start_urls = [\"https://httpbin.org/get\"] async def init(self): pass async def start_requests(self): pass def parse(self, request, response): print(response) middleware = Middleware() @middleware.request async def set_request_middleware(spider_ins, request): pass @middleware.response async def set_response_middleware(spider_ins, request, response): pass if __name__ == \"__main__\": middleware_list = [middleware] Demo.start(middleware=middleware_list) \u8fd0\u884c\u722c\u866b python demo.py \u53e6\u4e00\u79cd\u521d\u59cb\u5316 async def start_requests(self): yield Request(url=\"https://httpbin.org/json\", callback=self.parse_json) \u6dfb\u52a0Item class DataItem(Item): title: str type: str \u5904\u7406\u54cd\u5e94\uff0c\u89e3\u6790 async def parse_json(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item \u4f7f\u7528\u4e2d\u95f4\u4ef6 @middleware.request async def set_request_middleware(spider_ins, request): request.timeout = 3 print(f\"set_request_middleware {request}\") @middleware.response async def set_response_middleware(spider_ins, request, response): print(f\"set_response_middleware {request} {response}\") \u6570\u636e\u5b58\u50a8 \u8fd9\u91cc\u53ea\u6253\u5370 async def process_item(self, item_list: list): for item in item_list: print(item) \u5b8c\u6574\u4ee3\u7801 # -*- coding: utf-8 -*- from hoopa import Spider, Request from hoopa import Item from hoopa import Middleware class DataItem(Item): title: str type: str class Demo(Spider): name = \"demo\" start_urls = [\"https://httpbin.org/get\"] async def start_requests(self): yield Request(url=\"https://httpbin.org/json\", callback=self.parse_json) async def parse(self, request, response): print(response.text) async def parse_json(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item async def process_item(self, item_list: list): for item in item_list: print(item) middleware = Middleware() @middleware.request async def set_request_middleware(spider_ins, request): request.timeout = 3 print(f\"set_request_middleware {request}\") @middleware.response async def set_response_middleware(spider_ins, request, response): print(f\"set_response_middleware {request} {response}\") if __name__ == \"__main__\": middleware_list = [middleware] Demo.start(middleware=middleware_list)","title":"3. \u5f00\u59cb"},{"location":"Started/3.start/#_1","text":"\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u5de5\u5177\u5feb\u901f\u521b\u5efa\u722c\u866b","title":"\u521b\u5efa\u722c\u866b"},{"location":"Started/3.start/#_2","text":"hoopa create -s demo -s \u8868\u793a\u521b\u5efa\u7684\u662f\u5355\u6587\u4ef6\u722c\u866b \u53e6\u5916\u53ef\u9009\u53c2\u6570\u6709-f(--full)\uff0c\u53ef\u4ee5\u521b\u5efa\u65b9\u6cd5\u7684\u6bd4\u8f83\u9f50\u5168\u7684\u722c\u866b hoopa create -s demo2 -f \u521b\u5efa\u722c\u866b\u9879\u76ee hoopa create -p demoProject \u4f8b\u5b50\uff1a hoopa create -s demo -f \u7136\u540e\u6dfb\u52a0\u5f00\u59cburl\uff1a \"https://httpbin.org/get\" from hoopa import Spider from hoopa import Item from hoopa import Middleware class DataItem(Item): pass class Demo(Spider): name = \"demo\" start_urls = [\"https://httpbin.org/get\"] async def init(self): pass async def start_requests(self): pass def parse(self, request, response): print(response) middleware = Middleware() @middleware.request async def set_request_middleware(spider_ins, request): pass @middleware.response async def set_response_middleware(spider_ins, request, response): pass if __name__ == \"__main__\": middleware_list = [middleware] Demo.start(middleware=middleware_list)","title":"\u521b\u5efa\u722c\u866b"},{"location":"Started/3.start/#_3","text":"python demo.py","title":"\u8fd0\u884c\u722c\u866b"},{"location":"Started/3.start/#_4","text":"async def start_requests(self): yield Request(url=\"https://httpbin.org/json\", callback=self.parse_json)","title":"\u53e6\u4e00\u79cd\u521d\u59cb\u5316"},{"location":"Started/3.start/#item","text":"class DataItem(Item): title: str type: str","title":"\u6dfb\u52a0Item"},{"location":"Started/3.start/#_5","text":"async def parse_json(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item","title":"\u5904\u7406\u54cd\u5e94\uff0c\u89e3\u6790"},{"location":"Started/3.start/#_6","text":"@middleware.request async def set_request_middleware(spider_ins, request): request.timeout = 3 print(f\"set_request_middleware {request}\") @middleware.response async def set_response_middleware(spider_ins, request, response): print(f\"set_response_middleware {request} {response}\")","title":"\u4f7f\u7528\u4e2d\u95f4\u4ef6"},{"location":"Started/3.start/#_7","text":"\u8fd9\u91cc\u53ea\u6253\u5370 async def process_item(self, item_list: list): for item in item_list: print(item)","title":"\u6570\u636e\u5b58\u50a8"},{"location":"Started/3.start/#_8","text":"# -*- coding: utf-8 -*- from hoopa import Spider, Request from hoopa import Item from hoopa import Middleware class DataItem(Item): title: str type: str class Demo(Spider): name = \"demo\" start_urls = [\"https://httpbin.org/get\"] async def start_requests(self): yield Request(url=\"https://httpbin.org/json\", callback=self.parse_json) async def parse(self, request, response): print(response.text) async def parse_json(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item async def process_item(self, item_list: list): for item in item_list: print(item) middleware = Middleware() @middleware.request async def set_request_middleware(spider_ins, request): request.timeout = 3 print(f\"set_request_middleware {request}\") @middleware.response async def set_response_middleware(spider_ins, request, response): print(f\"set_response_middleware {request} {response}\") if __name__ == \"__main__\": middleware_list = [middleware] Demo.start(middleware=middleware_list)","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"basicConcepts/1.request/","text":"Request Request \u662f\u5bf9\u8bf7\u6c42\u53c2\u6570\u7684\u5c01\u88c5\uff0c\u4e3b\u8981\u662f\u7ed9downloader\u4e0b\u8f7d\u5668\u7684\u4f7f\u7528 \u4e3b\u8981\u53c2\u6570 url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u94fe\u63a5 method\uff1a\u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c get \u6216\u8005 post \uff0c\u9ed8\u8ba4 get headers\uff1a\u8bf7\u6c42\u5934 callback\uff1a\u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u4f20\u5165\uff0c\u53ef\u4ee5\u662f\u51fd\u6570\u540d\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\uff0c\u6700\u7ec8\u5b58\u50a8\u7684\u662f\u51fd\u6570\u540d\u79f0\u5b57\u7b26\u4e32 meta\uff1a\u8de8\u8bf7\u6c42\u4f20\u9012\u6570\u636e request_config\uff1a\u8bf7\u6c42\u914d\u7f6e params: params\u53c2\u6570 data: post\u8bf7\u6c42data\u53c2\u6570 json: post\u8bf7\u6c42json\u53c2\u6570 dont_filter\uff1a\u662f\u5426\u53bb\u91cd\uff0c\u9ed8\u8ba4\u662f\u53bb\u91cd\uff0c\u5982\u679c\u4e0d\u9700\u8981\u53bb\u91cd\u53ef\u4ee5\u8bbe\u7f6e\u4e3aFalse priority\uff1a \u4f18\u5148\u7ea7\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u8bf7\u6c42\u8d8a\u4f18\u5148 session\uff1ahttp\u8bf7\u6c42session client_kwargs\uff1a\u4f1a\u8bdd\u53c2\u6570\uff0c\u4f8b\u5982 http_kwargs\uff1a\u8bf7\u6c42\u7684\u5176\u4ed6\u53c2\u6570 \u5176\u4e2dsession\u4e0d\u8fdb\u884c\u5e8f\u5217\u5316\u5b58\u50a8\u5230\u961f\u5217\u4e2d\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u4e5f\u662f\u65e0\u6548\u7684\uff0c\u4f1a\u88ab\u629b\u5f03\u3002 \u53ea\u6709\u4ece\u722c\u866b\u961f\u5217\u53d6\u51fa\u540e\uff0c\u8fdb\u884c\u8bbe\u7f6e\u624d\u6709\u6548\uff0c\u4f8b\u5982\u5728\u4e2d\u95f4\u4ef6\u548c\u91cd\u8bd5\u56de\u8c03\u4e2d\u8bbe\u7f6esession\u3002 \u53e6\u5916\u5176\u4ed6\u8bf7\u6c42\u7684\u53c2\u6570\u76f4\u63a5\u4f20\u5373\u53ef \u5e8f\u5217\u5316\u95ee\u9898 \u9ed8\u8ba4\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u662fujson\uff0c\u8fdb\u884c\u5b58\u50a8\u7684\u662fstr\uff0c\u4f46\u662f\u5f53request\u53c2\u6570\u5b58\u5728\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7\u65f6\uff0c\u4f7f\u7528redis\u961f\u5217\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u6b64\u65f6\u53ef\u4ee5\u9009\u62e9pickle\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u53e6\u5916\u4f7f\u7528pickle\u4e5f\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e SERIALIZATION=\"pickle\" \u53bb\u91cd\u6307\u7eb9 \u56e0\u4e3a\u6709post\u65b9\u6cd5\uff0c\u6240\u4ee5\u4e0d\u80fd\u7b80\u5355\u628aurl\u53bb\u91cd\uff0c\u53bb\u91cd\u6307\u7eb9\u7684\u751f\u6210\uff0c\u4e3b\u8981\u662f\u65b9\u6cd5\u7c7b\u578b\uff08get/post\uff09+url(\u5305\u542bquery string)+\u8bf7\u6c42\u4f53data+\u8bf7\u6c42\u4f53json def request_fingerprint(request): fp = hashlib.md5() fp.update(to_bytes(request.method)) fp.update(to_bytes(request.request_url)) fp.update(to_bytes(str(request.data)) or b'') fp.update(to_bytes(str(request.json)) or b'') return fp.hexdigest() \u4f8b\u5b50 request = Request(url=\"https://httpbin.org/get\", callback=\"parse\", timeout=5) request.proxy = \"http://127.0.0.1:8888\" request.timeout = 3 request.set(\"verify\", False) print(request.http_kwargs)","title":"1. Request"},{"location":"basicConcepts/1.request/#request","text":"Request \u662f\u5bf9\u8bf7\u6c42\u53c2\u6570\u7684\u5c01\u88c5\uff0c\u4e3b\u8981\u662f\u7ed9downloader\u4e0b\u8f7d\u5668\u7684\u4f7f\u7528","title":"Request"},{"location":"basicConcepts/1.request/#_1","text":"url\uff1a\u8bf7\u6c42\u7684\u8d44\u6e90\u94fe\u63a5 method\uff1a\u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c get \u6216\u8005 post \uff0c\u9ed8\u8ba4 get headers\uff1a\u8bf7\u6c42\u5934 callback\uff1a\u652f\u6301\u4e24\u79cd\u65b9\u5f0f\u4f20\u5165\uff0c\u53ef\u4ee5\u662f\u51fd\u6570\u540d\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\uff0c\u6700\u7ec8\u5b58\u50a8\u7684\u662f\u51fd\u6570\u540d\u79f0\u5b57\u7b26\u4e32 meta\uff1a\u8de8\u8bf7\u6c42\u4f20\u9012\u6570\u636e request_config\uff1a\u8bf7\u6c42\u914d\u7f6e params: params\u53c2\u6570 data: post\u8bf7\u6c42data\u53c2\u6570 json: post\u8bf7\u6c42json\u53c2\u6570 dont_filter\uff1a\u662f\u5426\u53bb\u91cd\uff0c\u9ed8\u8ba4\u662f\u53bb\u91cd\uff0c\u5982\u679c\u4e0d\u9700\u8981\u53bb\u91cd\u53ef\u4ee5\u8bbe\u7f6e\u4e3aFalse priority\uff1a \u4f18\u5148\u7ea7\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u8bf7\u6c42\u8d8a\u4f18\u5148 session\uff1ahttp\u8bf7\u6c42session client_kwargs\uff1a\u4f1a\u8bdd\u53c2\u6570\uff0c\u4f8b\u5982 http_kwargs\uff1a\u8bf7\u6c42\u7684\u5176\u4ed6\u53c2\u6570 \u5176\u4e2dsession\u4e0d\u8fdb\u884c\u5e8f\u5217\u5316\u5b58\u50a8\u5230\u961f\u5217\u4e2d\uff0c\u4e5f\u5c31\u662f\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u4e5f\u662f\u65e0\u6548\u7684\uff0c\u4f1a\u88ab\u629b\u5f03\u3002 \u53ea\u6709\u4ece\u722c\u866b\u961f\u5217\u53d6\u51fa\u540e\uff0c\u8fdb\u884c\u8bbe\u7f6e\u624d\u6709\u6548\uff0c\u4f8b\u5982\u5728\u4e2d\u95f4\u4ef6\u548c\u91cd\u8bd5\u56de\u8c03\u4e2d\u8bbe\u7f6esession\u3002 \u53e6\u5916\u5176\u4ed6\u8bf7\u6c42\u7684\u53c2\u6570\u76f4\u63a5\u4f20\u5373\u53ef","title":"\u4e3b\u8981\u53c2\u6570"},{"location":"basicConcepts/1.request/#_2","text":"\u9ed8\u8ba4\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u662fujson\uff0c\u8fdb\u884c\u5b58\u50a8\u7684\u662fstr\uff0c\u4f46\u662f\u5f53request\u53c2\u6570\u5b58\u5728\u4e00\u4e9b\u7279\u6b8a\u7b26\u53f7\u65f6\uff0c\u4f7f\u7528redis\u961f\u5217\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u6b64\u65f6\u53ef\u4ee5\u9009\u62e9pickle\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u53e6\u5916\u4f7f\u7528pickle\u4e5f\u53ef\u4ee5\u8282\u7701\u5185\u5b58\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e SERIALIZATION=\"pickle\"","title":"\u5e8f\u5217\u5316\u95ee\u9898"},{"location":"basicConcepts/1.request/#_3","text":"\u56e0\u4e3a\u6709post\u65b9\u6cd5\uff0c\u6240\u4ee5\u4e0d\u80fd\u7b80\u5355\u628aurl\u53bb\u91cd\uff0c\u53bb\u91cd\u6307\u7eb9\u7684\u751f\u6210\uff0c\u4e3b\u8981\u662f\u65b9\u6cd5\u7c7b\u578b\uff08get/post\uff09+url(\u5305\u542bquery string)+\u8bf7\u6c42\u4f53data+\u8bf7\u6c42\u4f53json def request_fingerprint(request): fp = hashlib.md5() fp.update(to_bytes(request.method)) fp.update(to_bytes(request.request_url)) fp.update(to_bytes(str(request.data)) or b'') fp.update(to_bytes(str(request.json)) or b'') return fp.hexdigest()","title":"\u53bb\u91cd\u6307\u7eb9"},{"location":"basicConcepts/1.request/#_4","text":"request = Request(url=\"https://httpbin.org/get\", callback=\"parse\", timeout=5) request.proxy = \"http://127.0.0.1:8888\" request.timeout = 3 request.set(\"verify\", False) print(request.http_kwargs)","title":"\u4f8b\u5b50"},{"location":"basicConcepts/2.response/","text":"Response Response \u662f\u5bf9http Response\u7684\u5c01\u88c5\uff0c\u7531\u4e0b\u8f7d\u5668\u8fd4\u56de \u4e3b\u8981\u53c2\u6570 url\uff1a\u8bf7\u6c42\u7684url body\uff1a\u54cd\u5e94\u4f53 status\uff1a\u54cd\u5e94\u72b6\u6001\u7801 headers\uff1a\u54cd\u5e94\u7684headers cookies\uff1a\u54cd\u5e94\u7684cookies history\uff1a\u54cd\u5e94\u7684history encoding\uff1aencoding ok: \u8bf7\u6c42\u72b6\u6001 error_type\uff1a \u9519\u8bef\u7c7b\u578b debug_msg\uff1a\u9519\u8bef\u65e5\u5fd7","title":"2. Response"},{"location":"basicConcepts/2.response/#response","text":"Response \u662f\u5bf9http Response\u7684\u5c01\u88c5\uff0c\u7531\u4e0b\u8f7d\u5668\u8fd4\u56de","title":"Response"},{"location":"basicConcepts/2.response/#_1","text":"url\uff1a\u8bf7\u6c42\u7684url body\uff1a\u54cd\u5e94\u4f53 status\uff1a\u54cd\u5e94\u72b6\u6001\u7801 headers\uff1a\u54cd\u5e94\u7684headers cookies\uff1a\u54cd\u5e94\u7684cookies history\uff1a\u54cd\u5e94\u7684history encoding\uff1aencoding ok: \u8bf7\u6c42\u72b6\u6001 error_type\uff1a \u9519\u8bef\u7c7b\u578b debug_msg\uff1a\u9519\u8bef\u65e5\u5fd7","title":"\u4e3b\u8981\u53c2\u6570"},{"location":"basicConcepts/3.downloader/","text":"Downloader Downloader \u662f\u4e0b\u8f7d\u5668\uff0c\u7528\u4e8e\u7f51\u7edc\u8bf7\u6c42 \u4e0b\u8f7d\u5668\u5df2\u5b9e\u73b0\u7684\u6709aiohttp\u548chttpx\uff0c \u9ed8\u8ba4\u4f7f\u7528aiohttp \u53ef\u4ee5\u5728spider\u8bbe\u7f6e from hoopa.settings import const # downloader_cls = const.AiohttpDownloader # \u8bbe\u7f6e\u4e3ahttpx downloader_cls = const.HttpxDownloader \u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u8bbe\u7f6e from hoopa.settings import const DOWNLOADER_CLS = const.HttpxDownloader const.HttpxDownloader\u548cconst.AiohttpDownloader\u53ea\u662f\u5e38\u91cf\uff0c \"hoopa.downloader.HttpxDownloader\"\u548c\"hoopa.downloader.AiohttpDownloader\"\uff0c\u586b\u5199\u8fd9\u4e24\u4e2a\u4e5f\u662f\u53ef\u4ee5\u7684 \u4e3b\u8981\u65b9\u6cd5\uff1a fetch: \u8bf7\u6c42\u7f51\u9875\u8d44\u6e90 \u4e3b\u8981\u53c2\u6570 request: Request\u5bf9\u8c61\uff0c\u5177\u4f53\u770bRequest\u7684\u6587\u6863 \u8fd4\u56de response\uff1aResponse\u5bf9\u8c61\uff0c\u5177\u4f53\u770bResponse\u7684\u6587\u6863 session\u8bf4\u660e \u4e0b\u8f7d\u5668\u9ed8\u8ba4\u4f7f\u7528\u5168\u5c40session \u5982\u679c\u6709\u6307\u5b9asession\uff0c\u8bf7\u8bbe\u7f6e\u53c2\u6570Request.session \u5982\u679c\u8bf7\u6c42\u60f3\u5355\u72ec\u521b\u5efasession\uff0c\u8bf7\u8bbe\u7f6e\u53c2\u6570Request.client_kwargs \u4f7f\u7528 \u6846\u67b6\u91cc\u9762\u7684\u4e0b\u8f7d\u5668\u662f\u53ef\u4ee5\u8c03\u7528\u7684\uff0c\u4f8b\u5982\u5728parse\u8c03\u7528\uff1a async def parse(self, request, response): resp = await self.downloader.fetch((hoopa.Request(url=\"https://httpbin.org/get\"))) print(resp.text) \u5728\u4e2d\u95f4\u4ef6\u4f7f\u7528\uff1a @middleware.request async def request_stats_middleware(spider_ins, request): resp = await spider_ins.downloader.fetch((hoopa.Request(url=\"https://httpbin.org/get\"))) print(resp.text) \u62d3\u5c55 \u9ed8\u8ba4\u652f\u6301aiohttp\u548chttpx\uff0c\u53ef\u662f\u81ea\u5df1\u7ee7\u627fDownloader\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u5668\uff0c\u4f8b\u5982pyppeteer, playwright\u7b49 \u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u4fee\u6539'DOWNLOADER_CLS'\u6216\u8005\u5728spider\u91cc\u9762\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff1a DOWNLOADER_CLS = \"hoopa.downloader.AiohttpDownloader\"","title":"3. Downloader"},{"location":"basicConcepts/3.downloader/#downloader","text":"Downloader \u662f\u4e0b\u8f7d\u5668\uff0c\u7528\u4e8e\u7f51\u7edc\u8bf7\u6c42 \u4e0b\u8f7d\u5668\u5df2\u5b9e\u73b0\u7684\u6709aiohttp\u548chttpx\uff0c \u9ed8\u8ba4\u4f7f\u7528aiohttp \u53ef\u4ee5\u5728spider\u8bbe\u7f6e from hoopa.settings import const # downloader_cls = const.AiohttpDownloader # \u8bbe\u7f6e\u4e3ahttpx downloader_cls = const.HttpxDownloader \u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u8bbe\u7f6e from hoopa.settings import const DOWNLOADER_CLS = const.HttpxDownloader const.HttpxDownloader\u548cconst.AiohttpDownloader\u53ea\u662f\u5e38\u91cf\uff0c \"hoopa.downloader.HttpxDownloader\"\u548c\"hoopa.downloader.AiohttpDownloader\"\uff0c\u586b\u5199\u8fd9\u4e24\u4e2a\u4e5f\u662f\u53ef\u4ee5\u7684","title":"Downloader"},{"location":"basicConcepts/3.downloader/#_1","text":"fetch: \u8bf7\u6c42\u7f51\u9875\u8d44\u6e90","title":"\u4e3b\u8981\u65b9\u6cd5\uff1a"},{"location":"basicConcepts/3.downloader/#_2","text":"request: Request\u5bf9\u8c61\uff0c\u5177\u4f53\u770bRequest\u7684\u6587\u6863","title":"\u4e3b\u8981\u53c2\u6570"},{"location":"basicConcepts/3.downloader/#_3","text":"response\uff1aResponse\u5bf9\u8c61\uff0c\u5177\u4f53\u770bResponse\u7684\u6587\u6863","title":"\u8fd4\u56de"},{"location":"basicConcepts/3.downloader/#session","text":"\u4e0b\u8f7d\u5668\u9ed8\u8ba4\u4f7f\u7528\u5168\u5c40session \u5982\u679c\u6709\u6307\u5b9asession\uff0c\u8bf7\u8bbe\u7f6e\u53c2\u6570Request.session \u5982\u679c\u8bf7\u6c42\u60f3\u5355\u72ec\u521b\u5efasession\uff0c\u8bf7\u8bbe\u7f6e\u53c2\u6570Request.client_kwargs","title":"session\u8bf4\u660e"},{"location":"basicConcepts/3.downloader/#_4","text":"\u6846\u67b6\u91cc\u9762\u7684\u4e0b\u8f7d\u5668\u662f\u53ef\u4ee5\u8c03\u7528\u7684\uff0c\u4f8b\u5982\u5728parse\u8c03\u7528\uff1a async def parse(self, request, response): resp = await self.downloader.fetch((hoopa.Request(url=\"https://httpbin.org/get\"))) print(resp.text) \u5728\u4e2d\u95f4\u4ef6\u4f7f\u7528\uff1a @middleware.request async def request_stats_middleware(spider_ins, request): resp = await spider_ins.downloader.fetch((hoopa.Request(url=\"https://httpbin.org/get\"))) print(resp.text)","title":"\u4f7f\u7528"},{"location":"basicConcepts/3.downloader/#_5","text":"\u9ed8\u8ba4\u652f\u6301aiohttp\u548chttpx\uff0c\u53ef\u662f\u81ea\u5df1\u7ee7\u627fDownloader\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u5668\uff0c\u4f8b\u5982pyppeteer, playwright\u7b49 \u53ea\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u9762\u4fee\u6539'DOWNLOADER_CLS'\u6216\u8005\u5728spider\u91cc\u9762\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff1a DOWNLOADER_CLS = \"hoopa.downloader.AiohttpDownloader\"","title":"\u62d3\u5c55"},{"location":"basicConcepts/4.item/","text":"Item item\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u5b9e\u73b0\u89e3\u6790\uff0c\u4f46\u662f\u6570\u636e\u7c7b\u8981\u7ee7\u627fItem \u4f7f\u7528 import hoopa class DataItem(hoopa.Item): pass","title":"4. Item"},{"location":"basicConcepts/4.item/#item","text":"item\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u5b9e\u73b0\u89e3\u6790\uff0c\u4f46\u662f\u6570\u636e\u7c7b\u8981\u7ee7\u627fItem","title":"Item"},{"location":"basicConcepts/4.item/#_1","text":"import hoopa class DataItem(hoopa.Item): pass","title":"\u4f7f\u7528"},{"location":"basicConcepts/5.spider/","text":"Spider \u722c\u866b\u7684\u6838\u5fc3\uff0c\u4e5f\u662f\u722c\u866b\u7684\u5165\u53e3\uff0cspider\u5c06\u5404\u4e2a\u529f\u80fd\u6a21\u5757\u7ec4\u5408\u5230\u4e00\u8d77\u3002 \u4e3b\u8981\u53c2\u6570 Spider\u7684\u4e3b\u8981\u53c2\u6570\u662f\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5b50\u7c7b\u7ee7\u627fSpider\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u53c2\u6570\u914d\u7f6e\u722c\u866b name: \u722c\u866b\u540d\u79f0 worker_numbers: \u6700\u5927\u534f\u7a0b\u6570 download_delay: \u722c\u866b\u8bf7\u6c42\u95f4\u9694 pending_threshold: pending\u8d85\u65f6\u65f6\u95f4 run_forever: \u4efb\u52a1\u5b8c\u6210\u4e0d\u505c\u6b62, \u9ed8\u8ba4False queue_cls: \u4efb\u52a1\u961f\u5217\u8def\u5f84\uff0c\u9ed8\u8ba4\uff1aconst.MemoryQueue(hoopa.queues.MemoryQueue) clean_queue: \u6e05\u7a7a\u4efb\u52a1\u961f\u5217\uff0c\u9ed8\u8ba4False priority: \u6307\u5b9a\u961f\u5217\u4f18\u5148\u7ea7\uff08int\uff0clist[int]\uff09\uff0credis\u4f18\u5148\u961f\u5217\u6709\u6548 downloader_cls: \u4e0b\u8f7d\u5668\u8def\u5f84\uff0c\u9ed8\u8ba4\uff1aconst.AiohttpDownloader(hoopa.downloader.AiohttpDownloader) middlewares: \u4e0b\u8f7d\u4e2d\u95f4\u4ef6 dupefilter_cls: \u53bb\u91cd\u5668\u8def\u5f84\uff0c\u4e0d\u914d\u7f6e\u7684\u8bdd\u6839\u636equeue_cls\u6765\u51b3\u5b9a, MemoryQueue\u548cRabbitMQQueue\u4f7f\u7528MemoryDupeFilter\uff0cRedisQueue\u4f7f\u7528RedisDupeFilter clean_dupefilter: \u6e05\u7a7a\u53bb\u91cd\u5668\uff0c\u9ed8\u8ba4\u7b49\u4e8eclean_queue dupefilter_setting: \u53bb\u91cd\u5668\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u7b49\u4e8eredis_setting redis_setting: redis\u8fde\u63a5\u914d\u7f6e\uff0c\u53ef\u4ee5\u662f\u5b57\u5178\uff0c\u4e5f\u53ef\u4ee5\u662furi mq_uri: mq uri\u94fe\u63a5 mq_maxsize: mq\u8fde\u63a5\u6c60\u5927\u5c0f mq_api_port: mq web api\u7aef\u53e3 serialization: \u5e8f\u5217\u5316\u6a21\u5757\uff0c\u9ed8\u8ba4ujson\uff0c\u53ef\u9009pickle log_level\uff1a \u65e5\u5fd7\u7ea7\u522b\uff0c\u9ed8\u8ba4INFO log_write_file\uff1a \u65e5\u5fd7\u662f\u5426\u5199\u5165\u6587\u4ef6\uff0c\u9ed8\u8ba4\u5426 settings_path\uff1a \u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff0c\u9ed8\u8ba4\"config.setting\"\u3002\u53ef\u4f7f\u7528\u5168\u8def\u5f84\uff0c\u5982\uff1a\"/root/setting.py\"\uff08\u914d\u7f6e\u6587\u4ef6\u4e0d\u53ef\u914d\u7f6e\uff09 start_urls\uff1a \u8d77\u59cburl\u5217\u8868\uff0c\u9664\u4e86url\u5176\u5b83request\u53c2\u6570\u5168\u90e8\u9ed8\u8ba4\uff0ccallback\u9ed8\u8ba4\u4e3aparse\uff08\u914d\u7f6e\u6587\u4ef6\u4e0d\u53ef\u914d\u7f6e\uff09 \u4e3b\u8981\u65b9\u6cd5 start \u722c\u866b\u542f\u52a8\u5165\u53e3 \u4e3b\u8981\u53c2\u6570\uff1a before_start\uff1a\u722c\u866b\u5f00\u59cb\u524d\u7684\u94a9\u5b50\u51fd\u6570 after_stop\uff1a\u722c\u866b\u7ed3\u675f\u540e\u7684\u94a9\u5b50\u51fd\u6570 middleware\uff1a\u4e2d\u95f4\u4ef6\u7c7b\uff0c Middleware() \u5b9e\u4f8b\u5217\u8868 loop\uff1a\u4e8b\u4ef6\u5faa\u73af parse: \u89e3\u6790\u51fd\u6570\uff0c\u89e3\u6790\u8d77\u59cburl\uff0c\u5982\u679c\u89e3\u6790\u8d77\u59cburl\uff0c\u5b50\u7c7b\u8981\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570 \u4e3b\u8981\u53c2\u6570\uff1a self: \u5f53\u524d\u5b9e\u4f8b request: \u722c\u866b\u8bf7\u6c42\u8fc7\u7a0b\u4e2d\u7684request response: \u4e0b\u8f7d\u5668\u8fd4\u56de\u7684response init: \u8d1f\u8d23\u5f02\u6b65\u51fd\u6570\u7684\u521d\u59cb\u5316\uff0c\u5b50\u7c7b\u6839\u636e\u9700\u8981\u5b9e\u73b0 start_requests: \u7528\u4e8e\u521d\u59cb\u5316url\u7684\u4e00\u79cd\u65b9\u5f0f process_item: \u5904\u7406Item\u3002\u4f7f\u7528redis\u961f\u5217\u4f1a\u9ed8\u8ba4\u5b58\u50a8\u5230redis\uff08\u53ef\u91cd\u5199\uff09\uff0c\u5176\u5b83\u60c5\u51b5\u9700\u8981\u91cd\u5199\u3002 \u4e3b\u8981\u53c2\u6570\uff1a item_list\uff1a\u89e3\u6790\u51fd\u6570\u8fd4\u56de\u7684\u6240\u6709Item\u7ec4\u6210\u7684list \u4f7f\u7528 import hoopa from hoopa.settings import const class DataItem(hoopa.Item): title: str type: str class DemoSpider(hoopa.Spider): name = \"demo\" start_urls = [\"http://httpbin.org/json\"] downloader_cls = const.AiohttpDownloader async def parse(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item async def process_item(self, item_list: list): for item in item_list: print(item) if __name__ == \"__main__\": DemoSpider.start()","title":"5. Spider"},{"location":"basicConcepts/5.spider/#spider","text":"\u722c\u866b\u7684\u6838\u5fc3\uff0c\u4e5f\u662f\u722c\u866b\u7684\u5165\u53e3\uff0cspider\u5c06\u5404\u4e2a\u529f\u80fd\u6a21\u5757\u7ec4\u5408\u5230\u4e00\u8d77\u3002","title":"Spider"},{"location":"basicConcepts/5.spider/#_1","text":"Spider\u7684\u4e3b\u8981\u53c2\u6570\u662f\u9ed8\u8ba4\u914d\u7f6e\uff0c\u5b50\u7c7b\u7ee7\u627fSpider\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u53c2\u6570\u914d\u7f6e\u722c\u866b name: \u722c\u866b\u540d\u79f0 worker_numbers: \u6700\u5927\u534f\u7a0b\u6570 download_delay: \u722c\u866b\u8bf7\u6c42\u95f4\u9694 pending_threshold: pending\u8d85\u65f6\u65f6\u95f4 run_forever: \u4efb\u52a1\u5b8c\u6210\u4e0d\u505c\u6b62, \u9ed8\u8ba4False queue_cls: \u4efb\u52a1\u961f\u5217\u8def\u5f84\uff0c\u9ed8\u8ba4\uff1aconst.MemoryQueue(hoopa.queues.MemoryQueue) clean_queue: \u6e05\u7a7a\u4efb\u52a1\u961f\u5217\uff0c\u9ed8\u8ba4False priority: \u6307\u5b9a\u961f\u5217\u4f18\u5148\u7ea7\uff08int\uff0clist[int]\uff09\uff0credis\u4f18\u5148\u961f\u5217\u6709\u6548 downloader_cls: \u4e0b\u8f7d\u5668\u8def\u5f84\uff0c\u9ed8\u8ba4\uff1aconst.AiohttpDownloader(hoopa.downloader.AiohttpDownloader) middlewares: \u4e0b\u8f7d\u4e2d\u95f4\u4ef6 dupefilter_cls: \u53bb\u91cd\u5668\u8def\u5f84\uff0c\u4e0d\u914d\u7f6e\u7684\u8bdd\u6839\u636equeue_cls\u6765\u51b3\u5b9a, MemoryQueue\u548cRabbitMQQueue\u4f7f\u7528MemoryDupeFilter\uff0cRedisQueue\u4f7f\u7528RedisDupeFilter clean_dupefilter: \u6e05\u7a7a\u53bb\u91cd\u5668\uff0c\u9ed8\u8ba4\u7b49\u4e8eclean_queue dupefilter_setting: \u53bb\u91cd\u5668\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u7b49\u4e8eredis_setting redis_setting: redis\u8fde\u63a5\u914d\u7f6e\uff0c\u53ef\u4ee5\u662f\u5b57\u5178\uff0c\u4e5f\u53ef\u4ee5\u662furi mq_uri: mq uri\u94fe\u63a5 mq_maxsize: mq\u8fde\u63a5\u6c60\u5927\u5c0f mq_api_port: mq web api\u7aef\u53e3 serialization: \u5e8f\u5217\u5316\u6a21\u5757\uff0c\u9ed8\u8ba4ujson\uff0c\u53ef\u9009pickle log_level\uff1a \u65e5\u5fd7\u7ea7\u522b\uff0c\u9ed8\u8ba4INFO log_write_file\uff1a \u65e5\u5fd7\u662f\u5426\u5199\u5165\u6587\u4ef6\uff0c\u9ed8\u8ba4\u5426 settings_path\uff1a \u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff0c\u9ed8\u8ba4\"config.setting\"\u3002\u53ef\u4f7f\u7528\u5168\u8def\u5f84\uff0c\u5982\uff1a\"/root/setting.py\"\uff08\u914d\u7f6e\u6587\u4ef6\u4e0d\u53ef\u914d\u7f6e\uff09 start_urls\uff1a \u8d77\u59cburl\u5217\u8868\uff0c\u9664\u4e86url\u5176\u5b83request\u53c2\u6570\u5168\u90e8\u9ed8\u8ba4\uff0ccallback\u9ed8\u8ba4\u4e3aparse\uff08\u914d\u7f6e\u6587\u4ef6\u4e0d\u53ef\u914d\u7f6e\uff09","title":"\u4e3b\u8981\u53c2\u6570"},{"location":"basicConcepts/5.spider/#_2","text":"start \u722c\u866b\u542f\u52a8\u5165\u53e3 \u4e3b\u8981\u53c2\u6570\uff1a before_start\uff1a\u722c\u866b\u5f00\u59cb\u524d\u7684\u94a9\u5b50\u51fd\u6570 after_stop\uff1a\u722c\u866b\u7ed3\u675f\u540e\u7684\u94a9\u5b50\u51fd\u6570 middleware\uff1a\u4e2d\u95f4\u4ef6\u7c7b\uff0c Middleware() \u5b9e\u4f8b\u5217\u8868 loop\uff1a\u4e8b\u4ef6\u5faa\u73af parse: \u89e3\u6790\u51fd\u6570\uff0c\u89e3\u6790\u8d77\u59cburl\uff0c\u5982\u679c\u89e3\u6790\u8d77\u59cburl\uff0c\u5b50\u7c7b\u8981\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570 \u4e3b\u8981\u53c2\u6570\uff1a self: \u5f53\u524d\u5b9e\u4f8b request: \u722c\u866b\u8bf7\u6c42\u8fc7\u7a0b\u4e2d\u7684request response: \u4e0b\u8f7d\u5668\u8fd4\u56de\u7684response init: \u8d1f\u8d23\u5f02\u6b65\u51fd\u6570\u7684\u521d\u59cb\u5316\uff0c\u5b50\u7c7b\u6839\u636e\u9700\u8981\u5b9e\u73b0 start_requests: \u7528\u4e8e\u521d\u59cb\u5316url\u7684\u4e00\u79cd\u65b9\u5f0f process_item: \u5904\u7406Item\u3002\u4f7f\u7528redis\u961f\u5217\u4f1a\u9ed8\u8ba4\u5b58\u50a8\u5230redis\uff08\u53ef\u91cd\u5199\uff09\uff0c\u5176\u5b83\u60c5\u51b5\u9700\u8981\u91cd\u5199\u3002 \u4e3b\u8981\u53c2\u6570\uff1a item_list\uff1a\u89e3\u6790\u51fd\u6570\u8fd4\u56de\u7684\u6240\u6709Item\u7ec4\u6210\u7684list","title":"\u4e3b\u8981\u65b9\u6cd5"},{"location":"basicConcepts/5.spider/#_3","text":"import hoopa from hoopa.settings import const class DataItem(hoopa.Item): title: str type: str class DemoSpider(hoopa.Spider): name = \"demo\" start_urls = [\"http://httpbin.org/json\"] downloader_cls = const.AiohttpDownloader async def parse(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item async def process_item(self, item_list: list): for item in item_list: print(item) if __name__ == \"__main__\": DemoSpider.start()","title":"\u4f7f\u7528"},{"location":"basicConcepts/6.middleware/","text":"Middleware Middleware \u4e0b\u8f7d\u4e2d\u95f4\u4ef6\uff0c\u4e3b\u8981\u662f\u5bf9\u722c\u866b\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5904\u7406\u3002 \u8bf4\u660e \u4e2d\u95f4\u4ef6\u5904\u7406\u51fd\u6570\u9700\u8981\u5e26\u4e0a\u7279\u5b9a\u7684\u53c2\u6570 \u8fd4\u56de\u503c\uff1a\u6709Response, Request\u3002\u5f53\u6709\u8fd4\u56de\u503c\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u6267\u884c\u540e\u9762\u7684\u4e2d\u95f4\u4ef6\uff0c \u5982\u679c\u662frequest\u7684\u4e2d\u95f4\u4ef6\u6709\u8fd4\u56de\u7684\u8bdd\uff0c\u4e0d\u4f1a\u8c03\u7528\u4e0b\u8f7d\u5668\u3002 \u4f7f\u7528 from hoopa import Middleware middleware = Middleware() @middleware.request async def set_request(spider_ins, request): print(\"\u6bcf\u6b21\u8bf7\u6c42\u524d\u8c03\u7528\") @middleware.response async def print_on_response(spider_ins, request, response): print(\"\u6bcf\u6b21\u8bf7\u6c42\u540e\u8c03\u7528\")","title":"6. Middleware"},{"location":"basicConcepts/6.middleware/#middleware","text":"Middleware \u4e0b\u8f7d\u4e2d\u95f4\u4ef6\uff0c\u4e3b\u8981\u662f\u5bf9\u722c\u866b\u8bf7\u6c42\u548c\u54cd\u5e94\u7684\u5904\u7406\u3002","title":"Middleware"},{"location":"basicConcepts/6.middleware/#_1","text":"\u4e2d\u95f4\u4ef6\u5904\u7406\u51fd\u6570\u9700\u8981\u5e26\u4e0a\u7279\u5b9a\u7684\u53c2\u6570 \u8fd4\u56de\u503c\uff1a\u6709Response, Request\u3002\u5f53\u6709\u8fd4\u56de\u503c\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u6267\u884c\u540e\u9762\u7684\u4e2d\u95f4\u4ef6\uff0c \u5982\u679c\u662frequest\u7684\u4e2d\u95f4\u4ef6\u6709\u8fd4\u56de\u7684\u8bdd\uff0c\u4e0d\u4f1a\u8c03\u7528\u4e0b\u8f7d\u5668\u3002","title":"\u8bf4\u660e"},{"location":"basicConcepts/6.middleware/#_2","text":"from hoopa import Middleware middleware = Middleware() @middleware.request async def set_request(spider_ins, request): print(\"\u6bcf\u6b21\u8bf7\u6c42\u524d\u8c03\u7528\") @middleware.response async def print_on_response(spider_ins, request, response): print(\"\u6bcf\u6b21\u8bf7\u6c42\u540e\u8c03\u7528\")","title":"\u4f7f\u7528"},{"location":"basicConcepts/7.queue/","text":"Queue \u722c\u866b\u961f\u5217\uff0c\u9ed8\u8ba4\u5b9e\u73b0\u7684\u6709\uff1a\u5185\u5b58\u3001redis\u3001rabbitmq\u4e09\u79cd\u961f\u5217\uff0c\u53e6\u5916\u5982\u679c\u6709\u9700\u6c42\u53ef\u4ee5\u81ea\u5b9a\u4e49\u961f\u5217 \u5185\u5b58\u548crabbitmq\u9664\u4e86\u5b58\u50a8\uff0c\u5176\u4ed6\u7684\u57fa\u672c\u5dee\u4e0d\u591a\u3002rabbitmq\u961f\u5217\u8fd8\u4e0d\u5b8c\u5584 redis\u5b9e\u73b0\u6bd4\u8f83\u591a\u7684\u529f\u80fd\u3002 \u4f7f\u7528 \u9ed8\u8ba4\u4f7f\u7528\u7684\u662f\u5185\u5b58\u961f\u5217\uff0c\u5207\u6362\u6210redis\u961f\u5217\u8bbe\u7f6equeue_cls\u548credis_setting\uff0c\u5f53\u4f7f\u7528redis\u4f5c\u4e3a\u961f\u5217\u7684\u65f6\u5019\uff0c \u4fe1\u606f\u7edf\u8ba1\u548c\u53bb\u91cd\u9ed8\u8ba4redis queue_cls = const.RedisQueue # setting\u53ef\u4ee5\u662furi\uff0c\u4e5f\u53ef\u4ee5\u662f\u914d\u7f6e\u5b57\u5178 # redis_setting = \"redis://127.0.0.1:6379/0?encoding=utf-8\" redis_setting = { 'host': '127.0.0.1', 'port': 6379, 'db': 0, 'password': '' } \u4f8b\u5b50\uff1a import hoopa from hoopa.settings import const class DataItem(hoopa.Item): title: str type: str class RedisDemoSpider(hoopa.Spider): name = \"redis_demo\" start_urls = [\"http://httpbin.org/json\"] # \u8bbe\u7f6e\u961f\u5217\u4e3aredis queue_cls = const.RedisQueue redis_setting = \"redis://127.0.0.1:6379/0?encoding=utf-8\" async def parse(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item if __name__ == \"__main__\": RedisDemoSpider.start() \u8fd0\u884c\u5b8c\u6210\u540e\uff0credis\u622a\u56fe\uff1a DupeFilter: \u53bb\u91cd\u6307\u7eb9 DataItem: \u6570\u636e Stats: \u7edf\u8ba1","title":"7. Queue"},{"location":"basicConcepts/7.queue/#queue","text":"\u722c\u866b\u961f\u5217\uff0c\u9ed8\u8ba4\u5b9e\u73b0\u7684\u6709\uff1a\u5185\u5b58\u3001redis\u3001rabbitmq\u4e09\u79cd\u961f\u5217\uff0c\u53e6\u5916\u5982\u679c\u6709\u9700\u6c42\u53ef\u4ee5\u81ea\u5b9a\u4e49\u961f\u5217 \u5185\u5b58\u548crabbitmq\u9664\u4e86\u5b58\u50a8\uff0c\u5176\u4ed6\u7684\u57fa\u672c\u5dee\u4e0d\u591a\u3002rabbitmq\u961f\u5217\u8fd8\u4e0d\u5b8c\u5584 redis\u5b9e\u73b0\u6bd4\u8f83\u591a\u7684\u529f\u80fd\u3002","title":"Queue"},{"location":"basicConcepts/7.queue/#_1","text":"\u9ed8\u8ba4\u4f7f\u7528\u7684\u662f\u5185\u5b58\u961f\u5217\uff0c\u5207\u6362\u6210redis\u961f\u5217\u8bbe\u7f6equeue_cls\u548credis_setting\uff0c\u5f53\u4f7f\u7528redis\u4f5c\u4e3a\u961f\u5217\u7684\u65f6\u5019\uff0c \u4fe1\u606f\u7edf\u8ba1\u548c\u53bb\u91cd\u9ed8\u8ba4redis queue_cls = const.RedisQueue # setting\u53ef\u4ee5\u662furi\uff0c\u4e5f\u53ef\u4ee5\u662f\u914d\u7f6e\u5b57\u5178 # redis_setting = \"redis://127.0.0.1:6379/0?encoding=utf-8\" redis_setting = { 'host': '127.0.0.1', 'port': 6379, 'db': 0, 'password': '' } \u4f8b\u5b50\uff1a import hoopa from hoopa.settings import const class DataItem(hoopa.Item): title: str type: str class RedisDemoSpider(hoopa.Spider): name = \"redis_demo\" start_urls = [\"http://httpbin.org/json\"] # \u8bbe\u7f6e\u961f\u5217\u4e3aredis queue_cls = const.RedisQueue redis_setting = \"redis://127.0.0.1:6379/0?encoding=utf-8\" async def parse(self, request, response): data = response.json() slides = data[\"slideshow\"][\"slides\"] for slide in slides: data_item = DataItem() data_item.title = slide[\"title\"] data_item.type = slide[\"type\"] yield data_item if __name__ == \"__main__\": RedisDemoSpider.start() \u8fd0\u884c\u5b8c\u6210\u540e\uff0credis\u622a\u56fe\uff1a DupeFilter: \u53bb\u91cd\u6307\u7eb9 DataItem: \u6570\u636e Stats: \u7edf\u8ba1","title":"\u4f7f\u7528"},{"location":"other/config/","text":"\u914d\u7f6e","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"other/config/#_1","text":"","title":"\u914d\u7f6e"},{"location":"other/dupefilters/","text":"Dupefilters \u53bb\u91cd\uff0c\u9ed8\u8ba4\u662f\u5185\u5b58\u53bb\u91cd\uff0c\u53bb\u91cd\u6307\u7eb9\u662fmd5 \u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539redis\u53bb\u91cd\uff08\u517c\u5bb9redis hash\u7684\u4e5f\u53ef\u4ee5\uff0c\u4f8b\u5982tendis\uff09 dupefilter_cls = const.RedisDupeFilter dupefilter_setting = \"redis://127.0.0.1:6379/0?encoding=utf-8\" \u9ed8\u8ba4\u53bb\u91cd\u6ca1\u6709\u5b9e\u73b0\u5e03\u9686\u53bb\u91cd\uff0c\u53ef\u4ee5\u8fdb\u884c\u62d3\u5c55","title":"\u53bb\u91cd"},{"location":"other/dupefilters/#dupefilters","text":"\u53bb\u91cd\uff0c\u9ed8\u8ba4\u662f\u5185\u5b58\u53bb\u91cd\uff0c\u53bb\u91cd\u6307\u7eb9\u662fmd5 \u53ef\u4ee5\u6839\u636e\u9700\u8981\u4fee\u6539redis\u53bb\u91cd\uff08\u517c\u5bb9redis hash\u7684\u4e5f\u53ef\u4ee5\uff0c\u4f8b\u5982tendis\uff09 dupefilter_cls = const.RedisDupeFilter dupefilter_setting = \"redis://127.0.0.1:6379/0?encoding=utf-8\" \u9ed8\u8ba4\u53bb\u91cd\u6ca1\u6709\u5b9e\u73b0\u5e03\u9686\u53bb\u91cd\uff0c\u53ef\u4ee5\u8fdb\u884c\u62d3\u5c55","title":"Dupefilters"},{"location":"other/other/","text":"\u6846\u67b6\u7684\u7531\u6765 \u6846\u67b6\u5f88\u591a\u4ee3\u7801\u53c2\u8003 ruia , \u6bcf\u5f53\u6211\u60f3\u8981\u52a0\u4ec0\u4e48\u529f\u80fd\u7684\u65f6\u5019\uff0cruia\u5f88\u591a\u90fd\u8003\u8651\u5230\u4e86\uff0c\u5927\u4f6c\u5199\u7684\u6846\u67b6\u5b9e\u5728\u592a\u597d\u4e86\uff0c\u53c2\u8003\u7684\u4e00\u4e9b\u4ee3\u7801\u53cd\u800c\u4f1a\u88ab\u6211\u6539\u5f97\u4e0d\u4f18\u96c5\u3002 \u4e5f\u53c2\u8003\u4e86\u5176\u4ed6\u5f00\u6e90\u6846\u67b6\u4f8b\u5982 Tinepeas \uff0c feapder \uff0c scrapy \uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u53ef\u80fd\u6ca1\u6709\u63d0\u5230\u3002 \u4e3a\u4ec0\u4e48\u6211\u8981\u81ea\u5df1\u53bb\u6539\u5199\uff1f\u4e00\u65b9\u9762\u662f\u7231\u597d\uff0c\u4ece\u733f\u4eba\u5b66\u5185\u90e8\u6846\u67b6\u5f00\u59cb\uff0c\u6211\u5c31\u6709\u53bb\u5c01\u88c5\u4e00\u4e0b\u6846\u67b6\u73a9\u73a9\u7684\u60f3\u6cd5\uff0c\u7136\u540e\u4e00\u70b9\u70b9\u5f00\u59cb\u3002\u53e6\u4e00\u65b9\u9762\u60f3\u8ba9\u6846\u67b6\u66f4\u7b26\u5408\u81ea\u5df1\u7684\u4e60\u60ef\u3002 \u4e3a\u4ec0\u4e48\u8981\u501f\u9274\u5176\u4ed6\u6846\u67b6\uff1f\u672c\u4eba\u4ee3\u7801\u80fd\u529b\u6709\u9650\u3002 \u672c\u4eba\u65e0\u610f\u53bb\u5bf9\u6bd4\u4ec0\u4e48\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u8d2c\u4f4e\u7684\u610f\u601d\uff0c\u8bf7\u522b\u6765\u55b7\u3002\u5982\u679c\u6709\u597d\u7684\u5efa\u8bae\u6b22\u8fce\u6765\u63d0\uff0c\u5b58\u5728\u4e0d\u5408\u7406\u7684\u4ee3\u7801\u4e5f\u6b22\u8fce\u63d0\u3002","title":"\u6846\u67b6\u7684\u7531\u6765"},{"location":"other/other/#_1","text":"\u6846\u67b6\u5f88\u591a\u4ee3\u7801\u53c2\u8003 ruia , \u6bcf\u5f53\u6211\u60f3\u8981\u52a0\u4ec0\u4e48\u529f\u80fd\u7684\u65f6\u5019\uff0cruia\u5f88\u591a\u90fd\u8003\u8651\u5230\u4e86\uff0c\u5927\u4f6c\u5199\u7684\u6846\u67b6\u5b9e\u5728\u592a\u597d\u4e86\uff0c\u53c2\u8003\u7684\u4e00\u4e9b\u4ee3\u7801\u53cd\u800c\u4f1a\u88ab\u6211\u6539\u5f97\u4e0d\u4f18\u96c5\u3002 \u4e5f\u53c2\u8003\u4e86\u5176\u4ed6\u5f00\u6e90\u6846\u67b6\u4f8b\u5982 Tinepeas \uff0c feapder \uff0c scrapy \uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u53ef\u80fd\u6ca1\u6709\u63d0\u5230\u3002 \u4e3a\u4ec0\u4e48\u6211\u8981\u81ea\u5df1\u53bb\u6539\u5199\uff1f\u4e00\u65b9\u9762\u662f\u7231\u597d\uff0c\u4ece\u733f\u4eba\u5b66\u5185\u90e8\u6846\u67b6\u5f00\u59cb\uff0c\u6211\u5c31\u6709\u53bb\u5c01\u88c5\u4e00\u4e0b\u6846\u67b6\u73a9\u73a9\u7684\u60f3\u6cd5\uff0c\u7136\u540e\u4e00\u70b9\u70b9\u5f00\u59cb\u3002\u53e6\u4e00\u65b9\u9762\u60f3\u8ba9\u6846\u67b6\u66f4\u7b26\u5408\u81ea\u5df1\u7684\u4e60\u60ef\u3002 \u4e3a\u4ec0\u4e48\u8981\u501f\u9274\u5176\u4ed6\u6846\u67b6\uff1f\u672c\u4eba\u4ee3\u7801\u80fd\u529b\u6709\u9650\u3002 \u672c\u4eba\u65e0\u610f\u53bb\u5bf9\u6bd4\u4ec0\u4e48\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u8d2c\u4f4e\u7684\u610f\u601d\uff0c\u8bf7\u522b\u6765\u55b7\u3002\u5982\u679c\u6709\u597d\u7684\u5efa\u8bae\u6b22\u8fce\u6765\u63d0\uff0c\u5b58\u5728\u4e0d\u5408\u7406\u7684\u4ee3\u7801\u4e5f\u6b22\u8fce\u63d0\u3002","title":"\u6846\u67b6\u7684\u7531\u6765"},{"location":"other/stats/","text":"Stats \u7edf\u8ba1\uff0c\u9ed8\u8ba4\u662f\u4f7f\u7528\u5185\u5b58\u7684\uff0c\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u7684redis\u961f\u5217\uff0c\u9ed8\u8ba4\u4f7f\u7528redis \u6839\u636e\u9700\u6c42\u4fee\u6539 stats_cls = const.RedisStatsCollector \u914d\u7f6e\u4e3aredis_setting","title":"\u4fe1\u606f\u6536\u96c6"},{"location":"other/stats/#stats","text":"\u7edf\u8ba1\uff0c\u9ed8\u8ba4\u662f\u4f7f\u7528\u5185\u5b58\u7684\uff0c\u5982\u679c\u4f7f\u7528\u9ed8\u8ba4\u7684redis\u961f\u5217\uff0c\u9ed8\u8ba4\u4f7f\u7528redis \u6839\u636e\u9700\u6c42\u4fee\u6539 stats_cls = const.RedisStatsCollector \u914d\u7f6e\u4e3aredis_setting","title":"Stats"}]}